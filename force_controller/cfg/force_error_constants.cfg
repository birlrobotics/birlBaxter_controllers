#!/usr/bin/env python
'''
This file contains the pid gains for force and moment controllers for the control basis controller. This file should start with the values that were obtained from your tuning routine. If rqt_reconfigure is run, the default values in this file will supercede any values that have been set in the code or the force_controller set_point launch file.
'''
PACKAGE = "force_error_constants"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# gen.add: name, type, level(bitmask), description, default, min, max
# gen.add("k_fp0",    double_t,    0, "A double value", 0.020,  0, 1)
# gen.add("k_fp1",    double_t,    0, "A double value", 0.020,  0, 1)
# gen.add("k_fp2",    double_t,    0, "A double value", 0.020,  0, 1)

# gen.add("k_mp0",    double_t,    0, "A double value", 0.150,  0, 1)
# gen.add("k_mp1",    double_t,    0, "A double value", 0.100,  0, 1)
# gen.add("k_mp2",    double_t,    0, "A double value", 0.400,  0, 1)
# gen.add("k_fp0",    double_t,    0, "A double value", 0.020,  0, 1)

# Proportional Gains
gen.add("k_fp0",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_fp1",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_fp2",    double_t,    0, "A double value", 0.00,  0, 1)

gen.add("k_mp0",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_mp1",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_mp2",    double_t,    0, "A double value", 0.00,  0, 1)

# Derivative Gains
gen.add("k_fv0",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_fv1",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_fv2",    double_t,    0, "A double value", 0.00,  0, 1)

gen.add("k_mv0",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_mv1",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_mv2",    double_t,    0, "A double value", 0.00,  0, 1)

# Integral Gains                                                                  
gen.add("k_fi0",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_fi1",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_fi2",    double_t,    0, "A double value", 0.00,  0, 1)

gen.add("k_mi0",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_mi1",    double_t,    0, "A double value", 0.00,  0, 1)
gen.add("k_mi2",    double_t,    0, "A double value", 0.00,  0, 1)


# Alpha parameter for IIR filter for joint goal command

# Tell generation to generate necessary files and exit problem. 
# Param #2= node name, #3= prefix for generated files: <name>Config.h/py
# Param #3 must be the same name as the name of this file without extension.
exit(gen.generate(PACKAGE, "force_controller", "force_error_constants"))

